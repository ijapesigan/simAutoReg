// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// FitVAROLS
arma::mat FitVAROLS(arma::mat Y, arma::mat X);
RcppExport SEXP _simAutoReg_FitVAROLS(SEXP YSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(FitVAROLS(Y, X));
    return rcpp_result_gen;
END_RCPP
}
// SimAR
arma::vec SimAR(int time, int burn_in, double constant, arma::vec coef, double sd);
RcppExport SEXP _simAutoReg_SimAR(SEXP timeSEXP, SEXP burn_inSEXP, SEXP constantSEXP, SEXP coefSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< double >::type constant(constantSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(SimAR(time, burn_in, constant, coef, sd));
    return rcpp_result_gen;
END_RCPP
}
// SimMVN
arma::mat SimMVN(int n, arma::vec location, arma::mat chol_scale);
RcppExport SEXP _simAutoReg_SimMVN(SEXP nSEXP, SEXP locationSEXP, SEXP chol_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type location(locationSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type chol_scale(chol_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(SimMVN(n, location, chol_scale));
    return rcpp_result_gen;
END_RCPP
}
// SimVARZIP
arma::mat SimVARZIP(int time, int burn_in, arma::vec constant, arma::mat coef, arma::mat chol_cov);
RcppExport SEXP _simAutoReg_SimVARZIP(SEXP timeSEXP, SEXP burn_inSEXP, SEXP constantSEXP, SEXP coefSEXP, SEXP chol_covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type constant(constantSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type chol_cov(chol_covSEXP);
    rcpp_result_gen = Rcpp::wrap(SimVARZIP(time, burn_in, constant, coef, chol_cov));
    return rcpp_result_gen;
END_RCPP
}
// SimVAR
arma::mat SimVAR(int time, int burn_in, arma::vec constant, arma::mat coef, arma::mat chol_cov);
RcppExport SEXP _simAutoReg_SimVAR(SEXP timeSEXP, SEXP burn_inSEXP, SEXP constantSEXP, SEXP coefSEXP, SEXP chol_covSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type constant(constantSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type coef(coefSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type chol_cov(chol_covSEXP);
    rcpp_result_gen = Rcpp::wrap(SimVAR(time, burn_in, constant, coef, chol_cov));
    return rcpp_result_gen;
END_RCPP
}
// SimVariance
arma::mat SimVariance(int n, arma::vec location, arma::mat chol_scale);
RcppExport SEXP _simAutoReg_SimVariance(SEXP nSEXP, SEXP locationSEXP, SEXP chol_scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type location(locationSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type chol_scale(chol_scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(SimVariance(n, location, chol_scale));
    return rcpp_result_gen;
END_RCPP
}
// YX
List YX(arma::mat data, int p);
RcppExport SEXP _simAutoReg_YX(SEXP dataSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(YX(data, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_simAutoReg_FitVAROLS", (DL_FUNC) &_simAutoReg_FitVAROLS, 2},
    {"_simAutoReg_SimAR", (DL_FUNC) &_simAutoReg_SimAR, 5},
    {"_simAutoReg_SimMVN", (DL_FUNC) &_simAutoReg_SimMVN, 3},
    {"_simAutoReg_SimVARZIP", (DL_FUNC) &_simAutoReg_SimVARZIP, 5},
    {"_simAutoReg_SimVAR", (DL_FUNC) &_simAutoReg_SimVAR, 5},
    {"_simAutoReg_SimVariance", (DL_FUNC) &_simAutoReg_SimVariance, 3},
    {"_simAutoReg_YX", (DL_FUNC) &_simAutoReg_YX, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_simAutoReg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
